@inject ISyncLocalStorageService LocalStorage
@inject ICartService CartService

<button class="btn @(VariantAdded ? "btn-danger" : "btn-success")"
        @onclick="ToggleProductStatus">
    <i class="bi bi-cart-plus"></i>&nbsp; @(VariantAdded ? "Remove" : "Add to cart")
</button>


@code {
    [Inject]
    protected ToastService ToastService { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public CartProductArgs CartProductArgs { get; set; } = new();


    [Parameter]
    [EditorRequired]
    public EventCallback<CartProductArgs> CartProductChanged { get; set; }

    [Parameter]
    public bool VariantAdded { get; set; }

    [Parameter]
    public EventCallback<bool> VariantAddedChanged { get; set; }

    private bool productAdded { get; set; } = false;




    protected override void OnInitialized()
    {
        CheckProductInCart();
    }

    private async Task ToggleProductStatus()
    {
        if (VariantAdded)
        {
            await CartService.RemoveCartItem(CartProductArgs.ProductId, CartProductArgs.ProductTypeId);
            ToastService.Notify(new(ToastType.Danger, "Product removed from cart"));
        }
        else
            /// The invoked handler adds product to cart
            await CartProductChanged.InvokeAsync(CartProductArgs);

        ToggleButtonText();
    }


    private bool CheckProductInCart()
    {
        List<CartItem>? cart = LocalStorage.GetItem<List<CartItem>>(CartService.CartName);

        if (cart == null)
            return false;


        CartItem? cartItem = cart
                .Where(item => 
                    item.ProductId.Equals(CartProductArgs.ProductId)
                    && item.ProductTypeId.Equals(CartProductArgs.ProductTypeId))
                .FirstOrDefault();

        if (cartItem == null)
            return false;

        VariantAdded = cartItem != null;
        return true;
    }

    private void ToggleButtonText() => VariantAdded = CheckProductInCart();
}
