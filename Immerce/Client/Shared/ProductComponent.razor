@inject IProductService ProductService



<div class="media-img-wrapper mr-2">
    <a href="/products/@product.Id">
        <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
    </a>
</div>
<div class="media-body">
    <a href="/products/@product.Id">
        <h4 class="mb-0">@product.Title</h4>
    </a>
    <p>
        @descriptionText
        <span>
            <a class="show-description" @onclick="ToggleDescription">
                &nbsp;@showDescriptionButton
            </a>
        </span>
    </p>
    

    <h5 class="price">@GetProductPriceText(product)</h5>
</div>



@code {
    [Parameter]
    public Product product { get; set; } = null!;

    private string showDescriptionButton { get; set; } = string.Empty;

    private string descriptionText { get; set; } = string.Empty;

    private int maxLength = 200;


    /// <summary>
    /// Set description text
    /// </summary>
    protected override void OnParametersSet()
    {
        ToggleDescription();
    }


    private string GetProductPriceText(Product product)
    {
        string priceText = string.Empty;
        List<ProductVariant>? variants = product.Variants;

        if (variants.Count == 0)
            return priceText;

        if (variants.Count == 1)
            return $"${variants[0].Price}";

        decimal minPrice = variants.Min(v => v.Price);

        return $"Starting @ ${minPrice}";
    }


    /// <summary>
    /// Toggle description text
    /// </summary>
    public void ToggleDescription()
    {
        Console.WriteLine(showDescriptionButton);
        Console.WriteLine(descriptionText.Length);

        // for first render
        if (string.IsNullOrEmpty(descriptionText) && string.IsNullOrEmpty(showDescriptionButton))
        {
            if (product.Description.Length <= maxLength)
            {
                descriptionText = product.Description;
                return;
            }

            else
            {
                descriptionText = $"{product.Description.Substring(0, maxLength)}";
                showDescriptionButton = "read more...";
                return;
            }
        }

        // Toggle

        // description texts < 200
        if (descriptionText.Length <= maxLength && string.IsNullOrEmpty(showDescriptionButton))
        {
            return;
        }

        if (descriptionText.Length <= maxLength && showDescriptionButton == "read more...")
        {
            descriptionText = product.Description;
            showDescriptionButton = "hide";
            return;
        }

        else if (descriptionText.Length > maxLength && showDescriptionButton == "hide")
        {
            descriptionText = $"{product.Description.Substring(0, maxLength)}";
            showDescriptionButton = "read more...";
        }
    }
}