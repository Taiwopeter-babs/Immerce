@page "/products/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService



@if (product == null)
{
    <p>@Message</p>
}
else
{
  <h3>@product.Title</h3>

  <div class="media">

      <div class="media-img-wrapper mr-2">

        <a href="@product.ImageUrl">
            <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
        </a>

      </div>

      <div class="media-body">

        <a href="/products/@product.Id">
            <h3 class="mb-0">@product.Title</h3>
        </a>

        <p class="description">@product.Description</p>
        
        @if (product.Variants != null && product.Variants.Count > 1)
        {
            <div class="mb-3 variant-option">
                <label for="productVariant" class="form-label">Select product variant:</label>
                <select class="form-select form-select-sm mb-3" @bind="currentTypeId">
                    @foreach (var variant in product.Variants)
                    {
                        <option value="@variant.ProductTypeId">@variant.ProductType?.Name</option>
                    }
                </select>
            </div>
            
        }


        @if (selectedVariant != null)
        {
            if (selectedVariant.OriginalPrice > selectedVariant.Price)
            {
                <h6 class="text-muted original-price">$@selectedVariant.OriginalPrice</h6>
            }
            <h4 class="price">$@selectedVariant.Price</h4>
        }

        <CartButton
            CartProductArgs="@GetCartProductArgs()"
            CartProductChanged="HandleCartProductChanged"
        />

      </div>

  </div>
}




@code {
    [Parameter]
    public int Id { get; set; }

    private Product? product { get; set; }

    private string Message = string.Empty;

    /// <summary>
    /// Default product type id. This determines which price is shown depending
    /// on the product variant.
    /// </summary>
    private int currentTypeId = 1;



    protected override async Task OnParametersSetAsync()
    {
        var response = await ProductService.GetProduct(Id);

        if (response == null)
        {
            Message = "No product found";
        }
        else
        {
            Message = response.Success ? "Loading product..." : response.Message;
        }  

        product = response!.Data;

        var variants = product?.Variants;

        if (variants!.Count > 0)
        {
            // pick the first product type as the selected
            currentTypeId = variants[0].ProductTypeId;
        }

    }

    private ProductVariant? GetSelectedVariant()
    {
        return product?.Variants.FirstOrDefault(pv => pv.ProductTypeId == currentTypeId);

    }

    /// <summary>
    /// The selected variant in the dropdown menu. If there are no variants,
    /// the default is the only one available
    /// </summary>
    public ProductVariant? selectedVariant => GetSelectedVariant();

    /// <summary>
    /// handler to add to cart
    /// </summary>
    /// <returns></returns>
    private async Task HandleCartProductChanged(CartProductArgs args)
    {
        CartItem cartItem = new()
            {
                ProductId = args.ProductId,
                ProductTypeId = args.ProductTypeId
            };

        await CartService.AddToCart(cartItem);
    }

    public CartProductArgs GetCartProductArgs()
    {
        return new CartProductArgs()
            {
                ProductId = product!.Id,
                ProductTypeId = selectedVariant!.ProductTypeId
            };
    }
}
