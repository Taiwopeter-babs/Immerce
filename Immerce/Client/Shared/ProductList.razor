@inject IProductService ProductService
@implements IDisposable

<h3>Products</h3>

@if (ProductService.Products.Count == 0)
{
    <p><em>Loading Products...</em></p>
}
else
{
<ul class="list-unstyled">

    @foreach (Product product in ProductService.Products!)
    {
        <li class="media my-3">
            <div class="media-img-wrapper mr-2">
                        <a href="/product/@product.Id">
                    <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                </a>
            </div>
            <div class="media-body">
                        <a href="/product/@product.Id">
                    <h4 class="mb-0">@product.Title</h4>
                </a>
                <p>@product.Description</p>
                <h5 class="price">@GetProductPriceText(product)</h5>
            </div>
        </li>
    }
    
</ul>
}


@code {

    protected override void OnInitialized()
    {
        // Add event handler
        ProductService.ProductsListUrlChanged += ProductsChangedHandler!;
    }

    public void Dispose()
    {
        // remove event handler
        ProductService.ProductsListUrlChanged -= ProductsChangedHandler!;
    }

    /// <summary>
    /// Event handler for re-rendering ProductList component
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    public async void ProductsChangedHandler(object sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

    private string GetProductPriceText(Product product)
    {
        string priceText = string.Empty;
        List<ProductVariant>? variants = product.Variants;

        if (variants.Count == 0)
            return priceText;

        if (variants.Count == 1)
            return $"${variants[0].Price}";

        decimal minPrice = variants.Min(v => v.Price);

        return $"Starting @ ${minPrice}";
    }
}
