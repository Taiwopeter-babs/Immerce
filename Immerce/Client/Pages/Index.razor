@page "/"
@page "/{categoryUrl}"
@page "/products/search/"
@inject IProductService ProductService

<style>
    .hero-title {
        max-width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 500px;
        background: linear-gradient(225deg, #1D6C60, #246C82);
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
        color: transparent;
    }
</style>

<PageTitle>Immerce Shop</PageTitle>

<div class="hero-title">
    <h2>Immerce Experience</h2>
</div>


@if (CategoryUrl == null && SearchString == null)
{
    <FeaturedProducts />
}
else
{
   if (SearchString != null)
   {
       <ProductList RenderPagination="true" />
   }
   else
   {
       <ProductList />
   }
}


@code
{
    [Parameter]
    public string? CategoryUrl { get; set; } = null;


    #region Query Parameters

    [SupplyParameterFromQuery]
    [Parameter]
    public string? SearchString { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public int Page { get; set; }

    #endregion

    protected override async Task OnParametersSetAsync()
    {
        ProductService.PageParameters.Page = Page;

        if (SearchString != null)
            await ProductService.SearchProducts(SearchString);
        else
            await ProductService.GetProducts(CategoryUrl);
    }
}
