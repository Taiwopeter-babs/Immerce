@inject ICartService CartService
@inject ISyncLocalStorageService LocalStorage
@implements IDisposable

@if(IsNavigation)
{
    <NavLink class="nav-link" href="/cart" Match="NavLinkMatch.Prefix">
        <i class="bi bi-cart3"></i>&nbsp;Cart&nbsp;@GetCartItemsCount()
    </NavLink>
}
else
{
    <a class="nav-link cart-count" href="/cart">
        <i class="bi bi-cart3 cart-count"></i>&nbsp;Cart&nbsp;@GetCartItemsCount()
    </a>
}



@code {
    /// <summary>
    /// Renders markup based on parameter value. A navigation link markup
    /// from balzor is rendered if true, otherwise the HTML a link tag is rendered.
    /// Defaults to true.
    /// </summary>
    [Parameter]
    public bool IsNavigation { get; set; } = true;

    private int GetCartItemsCount()
    {
        List<CartItem>? cart = LocalStorage.GetItem<List<CartItem>>(CartService.CartName);

        return cart == null ? 0 : cart.Count;
    }

    protected override void OnInitialized()
    {
        // Add event handler
        CartService.CartChanged += HandleCartChanged!;
    }

    public void Dispose()
    {
        // remove event handler
        CartService.CartChanged += HandleCartChanged!;
    }

    /// <summary>
    /// Event handler for re-rendering component
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    public async void HandleCartChanged(object sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

}