@inject IProductService ProductService

<div class="media-img-wrapper mr-2">
    <a href="/products/@Product.Id">
        <img class="media-img" src="@Product.ImageUrl" alt="@Product.Title" />
    </a>
</div>
<div class="media-body">
    <a href="/products/@Product.Id">
        <h4 class="mb-0">@Product.Title</h4>
    </a>
    <p>
        @DescriptionText
        <span>
            <a class="show-description" @onclick="ToggleDescription">
                &nbsp;@ShowDescriptionButton
            </a>
        </span>
    </p>
    
    <div class="price-cart">
        <div><h5 class="price">@GetProductPriceText(Product)</h5></div>
        <div>
            <CartButton 
                CartProductArgs="GetCartProductArgs()"
                CartProductChanged="CartProductChanged"
             />
        </div>
    </div>
    
</div>



@code {
    [Parameter]
    [EditorRequired]
    public Product Product { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback<CartProductArgs> CartProductChanged { get; set; }

    private string ShowDescriptionButton { get; set; } = string.Empty;

    private string DescriptionText { get; set; } = string.Empty;

    private int MaxDescriptionLength = 200;

    private string READ_MORE_DESCRIPTION = "read more...";

    private string SHOW_LESS_DESCRIPTION = "hide";

    public CartProductArgs cartProductArgs { get; set; } = new();


    #region Methods

    /// <summary>
    /// Set description text and child component event args
    /// </summary>
    protected override void OnParametersSet()
    {
        ToggleDescription();

        cartProductArgs = GetCartProductArgs();
    }


    private string GetProductPriceText(Product product)
    {
        string priceText = string.Empty;
        string formattedPrice;

        List<ProductVariant>? variants = product.Variants;

        if (variants.Count == 0)
            return priceText;

        if (variants.Count == 1)
        {
            formattedPrice = GetFormattedCurrency(variants[0].Price, "HA-LATN-NG");
            return string.Format("{0}", formattedPrice);
        }

        decimal minPrice = variants.Min(v => v.Price);

        formattedPrice = GetFormattedCurrency(minPrice, "HA-LATN-NG");

        return string.Format("Starting @ {0}", formattedPrice);

    }


    /// <summary>
    /// Toggle description text
    /// </summary>
    public void ToggleDescription()
    {
        // for first render
        if (string.IsNullOrEmpty(DescriptionText) && string.IsNullOrEmpty(ShowDescriptionButton))
        {
            if (Product.Description.Length <= MaxDescriptionLength)
                DescriptionText = Product.Description;

            else
            {
                DescriptionText = Product.Description.Substring(0, MaxDescriptionLength);
                ShowDescriptionButton = READ_MORE_DESCRIPTION;
            }

            return;
        }

        /// Toggle

        if (DescriptionText.Length <= MaxDescriptionLength)
        {
            if (string.IsNullOrEmpty(ShowDescriptionButton))
                return;

            if (ShowDescriptionButton == READ_MORE_DESCRIPTION)
            {
                DescriptionText = $"{DescriptionText}{Product.Description.Substring(MaxDescriptionLength)}";

                ShowDescriptionButton = SHOW_LESS_DESCRIPTION;
            }

            return;
        }


        else if (DescriptionText.Length > MaxDescriptionLength
            && ShowDescriptionButton == SHOW_LESS_DESCRIPTION
            )
        {
            DescriptionText = $"{Product.Description.Substring(0, MaxDescriptionLength)}";

            ShowDescriptionButton = READ_MORE_DESCRIPTION;
        }
    }


    private CartProductArgs GetCartProductArgs()
    {
        return new CartProductArgs()
            {
                ProductId = Product.Id,

                /// The first variant is selected which is the default
                /// if the product has only one variant
                ProductTypeId = Product.Variants[0].ProductTypeId
            };
    }

    private string GetFormattedCurrency(decimal value, string culture)
    {
        var cultureInfo = new CultureInfo(culture);

        return string.Format("{1} {0:N2}", value, cultureInfo.NumberFormat.CurrencySymbol);
    }

    #endregion 
}