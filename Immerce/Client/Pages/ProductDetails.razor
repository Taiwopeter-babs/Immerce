@page "/products/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService
@inject ISyncLocalStorageService LocalStorage



@if (product == null)
{
    <p>@Message</p>
}
else
{
    @* <div id="product-title"><h3>@product.Title</h3></div> *@

  <div class="media">

      <div class="media-img-wrapper">

        <a href="@product.ImageUrl">
            <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
        </a>

      </div>

      <div class="media-body">

        <a href="/products/@product.Id">
            <h3 class="mb-0">@product.Title</h3>
        </a>

            <p class="description"><b>@product.Description</b></p>
        
        @if (product.Variants != null && product.Variants.Count > 1)
        {
            <div class="mb-3 variant-option">
                <label for="productVariant" class="form-label">Select product variant:</label>
                <select
                    class="form-select form-select-sm mb-3"
                    @onchange="VariantChanged"
                >
                    @foreach (var variant in product.Variants)
                    {
                            <option value="@variant.ProductTypeId">
                                @variant.ProductType?.Name
                            </option>
                    }
                </select>
            </div>
            
        }


        @if (selectedVariant != null)
        {
            if (selectedVariant.OriginalPrice > selectedVariant.Price)
            {
                <h6 class="text-muted original-price">$@selectedVariant.OriginalPrice</h6>
            }
            <h4 class="price">$@selectedVariant.Price</h4>
        }

        <div id="cart-button-container">
                <CartButton CartProductArgs="@GetCartProductArgs()"
                            CartProductChanged="HandleCartProductChanged" 
                            @bind-VariantAdded="VariantAdded"
                />
        </div>

      </div>

  </div>
}




@code {
    [Inject]
    protected ToastService ToastService { get; set; } = default!;

    [Parameter]
    public int Id { get; set; }

    private Product? product { get; set; }

    private string Message = string.Empty;

    private bool VariantAdded = false;

    /// <summary>
    /// Default product type id. This determines which price is shown depending
    /// on the product variant.
    /// </summary>
    private int CurrentVariantId { get; set; } = 1;

    /// <summary>
    /// The selected variant in the dropdown menu. If there are no variants,
    /// the default is the only one available
    /// </summary>
    public ProductVariant? selectedVariant => GetSelectedVariant();


    protected override async Task OnParametersSetAsync()
    {
        var response = await ProductService.GetProduct(Id);

        if (response == null)
        {
            Message = "No product found";
        }
        else
        {
            Message = response.Success ? "Loading product..." : response.Message;
        }  

        product = response!.Data;

        var variants = product?.Variants;

        if (variants!.Count > 0)
        {
            // pick the first product type as the selected
            CurrentVariantId = variants[0].ProductTypeId;
        }

        VariantAdded = CheckVariantInCart();
    }

    private void VariantChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            int.TryParse(e.Value.ToString(), out int result);

            CurrentVariantId = result;

            VariantAdded = CheckVariantInCart();
        }
    }

    private ProductVariant? GetSelectedVariant()
    {
        return product?.Variants.FirstOrDefault(pv => pv.ProductTypeId == CurrentVariantId);
    }

    /// <summary>
    /// handler to add to cart
    /// </summary>
    /// <returns></returns>
    private async Task HandleCartProductChanged(CartProductArgs args)
    {
        CartItem cartItem = new()
            {
                ProductId = args.ProductId,
                ProductTypeId = CurrentVariantId
            };

        await CartService.AddToCart(cartItem);
        ToastService.Notify(new(ToastType.Success, "Product added to cart"));

    }

    public CartProductArgs GetCartProductArgs()
    {
        return new CartProductArgs()
            {
                ProductId = selectedVariant!.ProductId,
                ProductTypeId = CurrentVariantId
            };
    }

    private bool CheckVariantInCart()
    {

        List<CartItem>? cart = LocalStorage.GetItem<List<CartItem>>(CartService.CartName);

        if (cart == null)
            return false;


        CartItem? cartItem = cart
                .Where(item =>
                    item.ProductId.Equals(product?.Id)
                    && item.ProductTypeId.Equals(CurrentVariantId))
                .FirstOrDefault();

        return cartItem != null;
    }
}
