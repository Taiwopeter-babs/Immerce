@inject IProductService ProductService
@inject ICartService CartService
@implements IDisposable


@if (ProductService.Products.Count == 0)
{
    <p><em>@ProductService.Message</em></p>
}
else
{
<ul class="list-unstyled">
    @foreach (Product product in ProductService.Products!)
    {
            <li class="media my-3" @key=@product.Id>
                <ProductComponent product="@product" CartProductChanged="HandleCartProductChanged" />
            </li>
    }
</ul>

    if (RenderPagination)
    {
        for (int pageIdx = 1; pageIdx <= ProductService.PageParameters.TotalPages; pageIdx++)
        {
            <a class="btn @GetPageButtonStyle(pageIdx) page-selection"
               href="products/search?searchString=@ProductService.PageParameters.LastSearchString&page=@pageIdx">
                @pageIdx
            </a>
        }
    }

   
}


@code {
    /// <summary>
    /// Optional paramter to render the pagination markup. Defaults to false.
    /// </summary>
    [Parameter]
    public bool RenderPagination { get; set; } = false;

    protected override void OnInitialized()
    {
        // Add event handler
        ProductService.ProductsListUrlChanged += HandleProductsChanged!;
    }

    public void Dispose()
    {
        // remove event handler
        ProductService.ProductsListUrlChanged -= HandleProductsChanged!;
    }

    /// <summary>
    /// Event handler for re-rendering ProductList component
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    public async void HandleProductsChanged(object sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }


    private string GetPageButtonStyle(int pageIdx)
    {
        return pageIdx == ProductService.PageParameters.Page
                ? "btn-info"
                : "btn-outline-info";
    }

    /// <summary>
    /// handler to add to cart
    /// </summary>
    /// <returns></returns>
    private async Task HandleCartProductChanged(CartProductArgs args)
    {
        CartItem cartItem = new()
            {
                ProductId = args.ProductId,
                ProductTypeId = args.ProductTypeId
            };

        await CartService.AddToCart(cartItem);
    }

}
