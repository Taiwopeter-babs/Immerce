@inject ICartService CartService
@inject ISyncLocalStorageService LocalStorage
@implements IDisposable


<NavLink class="nav-link" href="/cart">
    <i class="bi bi-cart3"></i>&nbsp;Cart&nbsp;@GetCartItemsCount()
</NavLink>



@code {

    private int GetCartItemsCount()
    {
        List<CartItem>? cart = LocalStorage.GetItem<List<CartItem>>(CartService.CartName);

        return cart == null ? 0 : cart.Count;
    }

    protected override void OnInitialized()
    {
        // Add event handler
        CartService.CartChanged += HandleCartChanged!;
    }

    public void Dispose()
    {
        // remove event handler
        CartService.CartChanged += HandleCartChanged!;
    }

    /// <summary>
    /// Event handler for re-rendering component
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    public async void HandleCartChanged(object sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

}